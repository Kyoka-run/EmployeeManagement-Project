{"ast":null,"code":"import axios from \"axios\";\nconst Employee_API = 'http://localhost:8080';\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\nclass AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    return axios.get(Employee_API + '/basicauth', {\n      headers: {\n        Authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  }\n  createBasicAuthToken(username, password) {\n    return 'Basic' + btoa(username + ':' + password);\n  }\n  registerSuccessfulLogin(username, password) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n  }\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n  logout() {\n    sess;\n  }\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.Authorization = token;\n      }\n      return config;\n    });\n  }\n}\nexport default AuthenticationService;","map":{"version":3,"names":["axios","Employee_API","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","executeBasicAuthenticationService","username","password","get","headers","Authorization","createBasicAuthToken","btoa","registerSuccessfulLogin","sessionStorage","setItem","setupAxiosInterceptors","isUserLoggedIn","user","getItem","logout","sess","token","interceptors","request","use","config"],"sources":["C:/Users/86177/Desktop/web/employee-app/src/service/AuthenticationService.jsx"],"sourcesContent":["import axios from \"axios\";\r\nconst Employee_API = 'http://localhost:8080';\r\n\r\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\r\n\r\nclass AuthenticationService {\r\n    executeBasicAuthenticationService(username, password) {\r\n        return axios.get(Employee_API + '/basicauth', {\r\n            headers: {\r\n                Authorization: this.createBasicAuthToken(username, password)\r\n            }})\r\n    }\r\n\r\n    createBasicAuthToken(username, password) {\r\n        return 'Basic'+ btoa(username + ':' + password);\r\n    }\r\n\r\n    registerSuccessfulLogin(username,password) {\r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\r\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n        if (user === null) return false;\r\n        return true;\r\n    }\r\n\r\n    logout() {\r\n        sess\r\n    }\r\n\r\n    setupAxiosInterceptors(token) {\r\n        axios.interceptors.request.use(\r\n            config => {\r\n                if (this.isUserLoggedIn()) {\r\n                    config.headers.Authorization = token;\r\n                }\r\n                return config;\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport default AuthenticationService;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,YAAY,GAAG,uBAAuB;AAE5C,OAAO,MAAMC,gCAAgC,GAAG,mBAAmB;AAEnE,MAAMC,qBAAqB,CAAC;EACxBC,iCAAiCA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IAClD,OAAON,KAAK,CAACO,GAAG,CAACN,YAAY,GAAG,YAAY,EAAE;MAC1CO,OAAO,EAAE;QACLC,aAAa,EAAE,IAAI,CAACC,oBAAoB,CAACL,QAAQ,EAAEC,QAAQ;MAC/D;IAAC,CAAC,CAAC;EACX;EAEAI,oBAAoBA,CAACL,QAAQ,EAAEC,QAAQ,EAAE;IACrC,OAAO,OAAO,GAAEK,IAAI,CAACN,QAAQ,GAAG,GAAG,GAAGC,QAAQ,CAAC;EACnD;EAEAM,uBAAuBA,CAACP,QAAQ,EAACC,QAAQ,EAAE;IACvCO,cAAc,CAACC,OAAO,CAACZ,gCAAgC,EAAEG,QAAQ,CAAC;IAClE,IAAI,CAACU,sBAAsB,CAAC,IAAI,CAACL,oBAAoB,CAACL,QAAQ,EAAEC,QAAQ,CAAC,CAAC;EAC9E;EAEAU,cAAcA,CAAA,EAAG;IACb,IAAIC,IAAI,GAAGJ,cAAc,CAACK,OAAO,CAAChB,gCAAgC,CAAC;IACnE,IAAIe,IAAI,KAAK,IAAI,EAAE,OAAO,KAAK;IAC/B,OAAO,IAAI;EACf;EAEAE,MAAMA,CAAA,EAAG;IACLC,IAAI;EACR;EAEAL,sBAAsBA,CAACM,KAAK,EAAE;IAC1BrB,KAAK,CAACsB,YAAY,CAACC,OAAO,CAACC,GAAG,CAC1BC,MAAM,IAAI;MACN,IAAI,IAAI,CAACT,cAAc,CAAC,CAAC,EAAE;QACvBS,MAAM,CAACjB,OAAO,CAACC,aAAa,GAAGY,KAAK;MACxC;MACA,OAAOI,MAAM;IACjB,CACJ,CAAC;EACL;AACJ;AAEA,eAAetB,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}